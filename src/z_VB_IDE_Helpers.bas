Attribute VB_Name = "z_VB_IDE_Helpers"
Option Explicit
'***
'by Lucas Plumb @ 2023
'z_VB_IDE_Helpers
'contains development assistance/code automation functions
'***
'*NOTE* - THIS MODULE REQUIRES 'TRUST ACCESS TO THE VBA PROJECT OBJECT MODEL' OPTION ENABLED IN TRUST CENTER SETTINGS
'THIS IS ONLY A DEVELOPMENT TOOL AND SHOULD NOT CONTAIN ANY METHODS USED IN THE REST OF THE PROJECT
'SIMILARLY, NONE OF THE METHODS IN THIS MODULE SHOULD BE USED ELSEWHERE IN THE PROJECT
'IT IS DESIGNED TO BE REMOVED FOR DISTRIBUTION SO THAT THE PROJECT CAN RUN WITHOUT REQUIRING TRUST TO THE VBA PROJECT OBJECT MODEL

'THE FUNCTIONS IN THIS CLASS MAY ALTER PROJECT FILES - BE CAREFUL!
'***


'select a module/class in the project window, then type 'VBIDE_EnumToStrings "NameOfEnumToConvert"' in the immediate window and press enter
'this will generate a function that returns enum names as strings which will be inserted into the selected module
Public Function VBIDE_EnumToStrings(enumToFind As String)
    Dim selComp As VBComponent
    Dim moduleCodeStr As String
    Dim i As Long, strLines() As String, strTemp() As String, enumName As String, enumVal As Long
    Dim enumStartLine As Long, enumEndLine As Long, enumCaseName As String
    Dim strFunc As String, strFuncName As String
    strFuncName = "Function " & enumToFind & "ToStr"
    
    Dim lastExplicitVal As Long
    
    lastExplicitVal = -1
    enumStartLine = -1
    
    Set selComp = Application.VBE.SelectedVBComponent
    moduleCodeStr = selComp.CodeModule.lines(1, selComp.CodeModule.CountOfLines)
    strLines = Split(moduleCodeStr, vbNewLine)
    
    For i = 0 To UBound(strLines)
        'Debug.Print "'" & LCase$(strLines(i))
        If InStr(LCase$(strLines(i)), LCase$(strFuncName)) Then
            Debug.Print "The Function '" & enumToFind & "ToStr' already exists on line " & i & " in module '" & selComp.Name & "', VBIDE_EnumToStrings aborted"
            Exit Function
        End If
    Next i
    
    For i = 0 To UBound(strLines)
        If InStr(LCase$(strLines(i)), LCase$("Enum " & enumToFind)) Then
            strTemp = Split(strLines(i), "Enum ")
            enumCaseName = strTemp(1)
            enumStartLine = i
        End If
        If strLines(i) = "End Enum" And enumStartLine >= 0 Then enumEndLine = i
        If enumStartLine > -1 And enumEndLine > 0 Then Exit For
    Next i
    
    If enumStartLine > -1 And enumEndLine > 0 Then
        strFunc = "'EnumToStr generated by VBIDE_EnumToStrings for " & enumCaseName & vbNewLine
        strFunc = strFunc & "Public Function " & enumCaseName & "ToStr(enumVal As " & enumCaseName & ") As String" & vbNewLine
        strFunc = strFunc & vbTab & "Select Case enumVal" & vbNewLine
        For i = enumStartLine + 1 To enumEndLine - 1
            If InStr(strLines(i), " = ") Then
                strTemp = Split(strLines(i), " = ")
                enumName = Trim$(strTemp(0))
                enumVal = strTemp(1)
            Else
                'if no explicit assignment, enum values start at 0 or the last explicitly assigned value
                enumName = Trim$(strLines(i))
                enumVal = lastExplicitVal + 1
            End If
            lastExplicitVal = enumVal
            strFunc = strFunc & vbTab & vbTab & "Case " & enumCaseName & "." & enumName & vbNewLine
            strFunc = strFunc & vbTab & vbTab & vbTab & enumCaseName & "ToStr = """ & enumName & """" & vbNewLine
        Next i
        strFunc = strFunc & vbTab & "End Select" & vbNewLine
        strFunc = strFunc & "End Function"
        
        Debug.Print strFunc
        '<TODO> NEED TO CHANGE THE INSERTLINES TO USE SOME LINE AFTER THE DECLARATION, SINCE ENUMS NEED TO BE DECLARED ABOVE ALL FUNCTIONS - CANT INSERT OUR FUNCTION DIRECTLY BELOW THE ENUM
        If MsgBox("Code will be inserted as shown in the Immediate Window in module '" & selComp.Name & "' on line " & enumEndLine + 2 & "." & vbCrLf & _
                "Are you sure?", vbYesNo, "Prompt") = vbYes Then
            selComp.CodeModule.InsertLines enumEndLine + 2, strFunc
            Debug.Print "The Function '" & enumCaseName & "' was added on line " & enumEndLine + 2 & " in module '" & selComp.Name & "'"
        Else
            Debug.Print "Aborted"
        End If
    Else
        Debug.Print "Enum '" & enumToFind & "' was not found in the selected code module: '" & selComp.Name & "'"
    End If
    
End Function
